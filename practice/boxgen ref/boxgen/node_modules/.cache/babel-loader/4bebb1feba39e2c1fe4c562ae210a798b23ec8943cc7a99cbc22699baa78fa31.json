{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexs\\\\Desktop\\\\CodingDojo\\\\MERN\\\\MERN-March\\\\practice\\\\boxgen\\\\boxgen\\\\src\\\\components\\\\NinjaForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NinjaForm = props => {\n  _s();\n  // using the getter and setter that were passed from my parent (App.js) component\n  const {\n    ninjaBoxArray,\n    setNinjaBoxArray\n  } = props;\n\n  // create state that can only be seen by this component\n  //    this is the state to keep track of the text box input value\n  const [color, setColor] = useState(\"\");\n  const [size, setSize] = useState(50);\n  const submitHandler = event => {\n    // we must prevent the browser from refreshing the page when a form is submitted\n    //    if we do not prevent the default behavior we will lose all values in state\n    event.preventDefault();\n\n    // add our new box object to the ninjaBoxArray WITHOUT losing what is already in there\n    //    we need to create a new array and spread out the current objects first\n    //    then we add the new box object as the last element in the array\n    setNinjaBoxArray([...ninjaBoxArray, {\n      color: color,\n      // be sure to add the px to the string so it can update the style correctly\n      size: size + \"px\"\n    }]);\n\n    // Ninja Bonus: clear out the color input and reset to the default size value\n    //    on successful submission.\n    // This makes it easier to add a new color once we submit the first one\n    setColor(\"\");\n    setSize(50);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      style: {\n        margin: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"color\",\n          value: color,\n          onChange: e => setColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Width and Height in Pixels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"size\",\n          value: size,\n          onChange: e => setSize(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(NinjaForm, \"/EcyXPrvdeUb45FTN6633PTItA0=\");\n_c = NinjaForm;\nexport default NinjaForm;\nvar _c;\n$RefreshReg$(_c, \"NinjaForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NinjaForm","props","_s","ninjaBoxArray","setNinjaBoxArray","color","setColor","size","setSize","submitHandler","event","preventDefault","children","onSubmit","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","name","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/alexs/Desktop/CodingDojo/MERN/MERN-March/practice/boxgen/boxgen/src/components/NinjaForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst NinjaForm = (props) => {\r\n  // using the getter and setter that were passed from my parent (App.js) component\r\n  const { ninjaBoxArray, setNinjaBoxArray } = props;\r\n\r\n  // create state that can only be seen by this component\r\n  //    this is the state to keep track of the text box input value\r\n  const [ color, setColor] = useState(\"\");\r\n  const [ size, setSize] = useState(50);\r\n  \r\n  const submitHandler = (event) => {\r\n    // we must prevent the browser from refreshing the page when a form is submitted\r\n    //    if we do not prevent the default behavior we will lose all values in state\r\n    event.preventDefault();\r\n\r\n    // add our new box object to the ninjaBoxArray WITHOUT losing what is already in there\r\n    //    we need to create a new array and spread out the current objects first\r\n    //    then we add the new box object as the last element in the array\r\n    setNinjaBoxArray( [ \r\n      ...ninjaBoxArray, \r\n      { \r\n        color: color,\r\n        // be sure to add the px to the string so it can update the style correctly\r\n        size: size + \"px\",\r\n      }\r\n      ] );\r\n\r\n    // Ninja Bonus: clear out the color input and reset to the default size value\r\n    //    on successful submission.\r\n    // This makes it easier to add a new color once we submit the first one\r\n    setColor(\"\");\r\n    setSize(50);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={ submitHandler } style={{ margin: \"20px\" }}>\r\n        <div>\r\n          <label>Color</label>\r\n          {/* \r\n            Ninja Bonus: clear out the color input on successful submission\r\n            By setting our input value to be the value in state, we can reset \r\n            it after successful submission \r\n          */}\r\n          <input \r\n            type=\"text\" \r\n            name=\"color\"\r\n            value={color}\r\n            onChange={ (e) => setColor(e.target.value) }\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Width and Height in Pixels</label>\r\n          {/* \r\n            Ninja Bonus: reset the size input on successful submission\r\n            By setting our input value to be the value in state, we can reset \r\n            it after successful submission \r\n          */}\r\n          <input \r\n            type=\"text\" \r\n            name=\"size\"\r\n            value={size}\r\n            onChange={ (e) => setSize(e.target.value) }\r\n          />\r\n        </div>\r\n        <button>Add</button>\r\n      </form>\r\n\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default NinjaForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B;EACA,MAAM;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGH,KAAK;;EAEjD;EACA;EACA,MAAM,CAAEI,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAAEU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAErC,MAAMY,aAAa,GAAIC,KAAK,IAAK;IAC/B;IACA;IACAA,KAAK,CAACC,cAAc,EAAE;;IAEtB;IACA;IACA;IACAP,gBAAgB,CAAE,CAChB,GAAGD,aAAa,EAChB;MACEE,KAAK,EAAEA,KAAK;MACZ;MACAE,IAAI,EAAEA,IAAI,GAAG;IACf,CAAC,CACA,CAAE;;IAEL;IACA;IACA;IACAD,QAAQ,CAAC,EAAE,CAAC;IACZE,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED,oBACET,OAAA;IAAAa,QAAA,eACEb,OAAA;MAAMc,QAAQ,EAAGJ,aAAe;MAACK,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO,CAAE;MAAAH,QAAA,gBACzDb,OAAA;QAAAa,QAAA,gBACEb,OAAA;UAAAa,QAAA,EAAO;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,eAMpBpB,OAAA;UACEqB,IAAI,EAAC,MAAM;UACXC,IAAI,EAAC,OAAO;UACZC,KAAK,EAAEjB,KAAM;UACbkB,QAAQ,EAAIC,CAAC,IAAKlB,QAAQ,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;QAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC5C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eACNpB,OAAA;QAAAa,QAAA,gBACEb,OAAA;UAAAa,QAAA,EAAO;QAA0B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,eAMzCpB,OAAA;UACEqB,IAAI,EAAC,MAAM;UACXC,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEf,IAAK;UACZgB,QAAQ,EAAIC,CAAC,IAAKhB,OAAO,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;QAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC3C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eACNpB,OAAA;QAAAa,QAAA,EAAQ;MAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACf;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEL;AAER,CAAC;AAAAjB,EAAA,CArEKF,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAuEf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}